(SPLTheory
 (pi_TCC1 0
  (pi_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (pi_TCC2 0
  (pi_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (hatAlpha_TCC1 0
  (hatAlpha_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (hatAlpha_TCC2 0
  (hatAlpha_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (commutative_product_family_product 0
  (commutative_product_family_product-1 nil 3734364247
   ("" (skolem 1 (c _))
    (("" (induct vModel)
      (("1" (skolem 1 base)
        (("1" (expand sigma)
          (("1" (assert)
            (("1" (expand hatAlpha)
              (("1" (expand pi) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 (pcon m1 m2))
        (("2" (flatten)
          (("2" (expand hatAlpha +)
            (("2" (expand pi +)
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (expand sigma 1) (("1" (assert) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand sigma 2) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AnnotativeModel type-decl nil SPLTheory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Property nonempty-type-decl nil SPLTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Conf type-eq-decl nil SPLTheory nil)
    (sigma def-decl "Property" SPLTheory nil)
    (hatAlpha def-decl "AnnotativeExpression" SPLTheory nil)
    (Product nonempty-type-decl nil SPLTheory nil)
    (alpha const-decl "[Product -> Property]" SPLTheory nil)
    (pi def-decl "Product" SPLTheory nil)
    (AnnotativeModel_induction formula-decl nil SPLTheory nil))
   shostak))
 (foldl_TCC1 0
  (foldl_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil nil))
 (pi__TCC1 0
  (pi__TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil nil))
 (wfRelationExp_TCC1 0
  (wfRelationExp_TCC1-1 nil 3762261712 ("" (subtype-tcc) nil nil) nil
   nil))
 (wfRelationExp_TCC2 0
  (wfRelationExp_TCC2-1 nil 3762261712 ("" (subtype-tcc) nil nil) nil
   nil))
 (foldlExp_TCC1 0
  (foldlExp_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil
   nil))
 (sigma__TCC1 0
  (sigma__TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil
   nil))
 (analyzeCM_TCC1 0
  (analyzeCM_TCC1-1 nil 3762261712 ("" (existence-tcc) nil nil) nil
   nil))
 (commutative_feature_product_product 0
  (commutative_feature_product_product-2 "measure_induction" 3763472700
   ("" (skolem 1 (_ c))
    (("" (skolem 1 cm)
      ((""
        (use "measure_induction[CompositionalModel, AnnotativeModel, top, relation].measure_induction")
        (("1" (postpone) nil nil) ("2" (use wfRelation) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (commutative_feature_product_product-1 nil 3762875081
   ("" (skolem 1 (cm c))
    (("" (expand pi_)
      (("" (expand foldl)
        ((""
          (case "map(LAMBDA (p: Pair):
                            IF (c(pc(p))) THEN ModelBase(pi_(cm(p), c))
                            ELSE ModelBase(emptyproduct)
                            ENDIF,
                          dependents(cm, top(cm)))=null")
          (("1" (assert) (("1" (postpone) nil nil)) nil)
           ("2" (lift-if)
            (("2" (bddsimp)
              (("2" (expand pi)
                (("2" (lift-if)
                  (("2" (bddsimp)
                    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
                     ("3" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (lift_TCC1 0
  (lift_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil nil))
 (lift_TCC2 0
  (lift_TCC2-1 nil 3762261712 ("" (termination-tcc) nil nil) nil nil))
 (sigmaLift_TCC1 0
  (sigmaLift_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil
   nil))
 (sigmaLift_TCC2 0
  (sigmaLift_TCC2-1 nil 3762261712 ("" (termination-tcc) nil nil) nil
   nil)))

