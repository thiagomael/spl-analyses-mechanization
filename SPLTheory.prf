(SPLTheory
 (alpha_TCC1 0
  (alpha_TCC1-1 nil 3785080622
   ("" (existence-tcc)
    (("" (instantiate 1 "LAMBDA(p:Product):emptyproperty")
      (("" (propax) nil nil)) nil))
    nil)
   ((Product nonempty-type-decl nil SPLTheory nil)
    (Property nonempty-type-decl nil SPLTheory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyproduct const-decl "Product" SPLTheory nil)
    (emptyproperty const-decl "Property" SPLTheory nil))
   nil))
 (pi_TCC1 0
  (pi_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (pi_TCC2 0
  (pi_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (hatAlpha_TCC1 0
  (hatAlpha_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (hatAlpha_TCC2 0
  (hatAlpha_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (commutative_product_family_product 0
  (commutative_product_family_product-1 nil 3734364247
   ("" (skolem 1 (c _))
    (("" (induct vModel)
      (("1" (skolem 1 base)
        (("1" (expand sigma)
          (("1" (assert)
            (("1" (expand hatAlpha)
              (("1" (expand pi) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 (pcon m1 m2))
        (("2" (flatten)
          (("2" (expand hatAlpha +)
            (("2" (expand pi +)
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (expand sigma 1) (("1" (assert) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand sigma 2) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AnnotativeModel type-decl nil SPLTheory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Property nonempty-type-decl nil SPLTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Conf type-eq-decl nil SPLTheory nil)
    (sigma def-decl "Property" SPLTheory nil)
    (hatAlpha def-decl "AnnotativeExpression" SPLTheory nil)
    (Product nonempty-type-decl nil SPLTheory nil)
    (emptyproduct const-decl "Product" SPLTheory nil)
    (emptyproperty const-decl "Property" SPLTheory nil)
    (alpha const-decl
     "{f: [Product -> Property] | f(emptyproduct) = emptyproperty}"
     SPLTheory nil)
    (pi def-decl "Product" SPLTheory nil)
    (AnnotativeModel_induction formula-decl nil SPLTheory nil))
   shostak))
 (finitePairs_TCC1 0
  (finitePairs_TCC1-1 nil 3785084526
   ("" (skeep 1 :preds? t)
    (("" (typepred "cm`ord")
      (("" (instantiate -2 (n id))
        (("" (assert)
          (("" (expand member) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((CompositionalModel type-eq-decl nil SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (set type-eq-decl nil sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (finitePairs 0
  (finitePairs-1 nil 3785084526 ("" (judgement-tcc) nil nil) nil nil))
 (set2list_TCC1 0
  (set2list_TCC1-1 nil 3769508394
   ("" (skeep 1 :preds? t)
    (("" (expand length 1)
      (("" (lemma "card_empty?[Pair]")
        (("" (instantiate -1 s)
          (("" (assert)
            (("" (iff)
              (("" (assert)
                (("" (expand member)
                  (("" (expand empty?)
                    (("" (expand member) (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (member def-decl "bool" list_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_empty? formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil))
   nil))
 (set2list_TCC2 0
  (set2list_TCC2-1 nil 3769508394 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (set2list_TCC3 0
  (set2list_TCC3-1 nil 3769508394
   ("" (lemma "card_rest[Pair]")
    (("" (skeep 1 :preds? t)
      (("" (instantiate -2 s) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((finite_rest application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil))
   nil))
 (set2list_TCC4 0
  (set2list_TCC4-1 nil 3769508394
   ("" (skeep 1 :preds? t)
    (("" (expand member)
      (("" (expand length)
        (("" (typepred "v(rest[Pair](s))")
          (("1" (lemma "card_rest[Pair]")
            (("1" (instantiate -1 s)
              (("1" (assert)
                (("1" (skeep 2 :preds? t)
                  (("1" (instantiate -3 x)
                    (("1" (assert)
                      (("1" (replace -3 2 RL)
                        (("1" (flatten)
                          (("1" (lemma "choose_rest_or[Pair]")
                            (("1" (instantiate -1 (s x))
                              (("1"
                                (expand member -1)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "rest_subset[Pair]")
                                        (("2"
                                          (instantiate -1 s)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand subset?)
                                              (("2"
                                                (instantiate -1 x)
                                                (("2"
                                                  (expand member -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "card_rest[Pair]") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (rest const-decl "set" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (< const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (rest_subset formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (card_rest formula-decl nil finite_sets nil)
    (length def-decl "nat" list_props nil))
   nil))
 (memberDependents 0
  (memberDependents-1 nil 3785084191
   ("" (skolem 1 (cm id pair) :skolem-typepreds? t)
    (("" (expand dependents)
      (("" (expand dependentes)
        ((""
          (typepred "set2list({p: Pair |
                         EXISTS (pc: PresenceCondition, n: nat):
                           cm`ord(n, id) AND
                            p`idt = n AND p`pc = getPCi(cm, n)})")
          (("1" (instantiate -2 pair) (("1" (assert) nil nil)) nil)
           ("2" (use finitePairs) nil nil)
           ("3" (skeep 1 :preds? t)
            (("3" (expand member (-4 1))
              (("3" (typepred "cm`ord")
                (("3" (instantiate -2 (n id)) (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dependents const-decl "list[Pair]" SPLTheory nil)
    (member const-decl "bool" sets nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (set2list def-decl "{l: list[Pair] |
         length(l) = card(s) AND (FORALL (x: Pair): s(x) IFF member(x, l))}"
     SPLTheory nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (length def-decl "nat" list_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finitePairs judgement-tcc nil SPLTheory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dependentes const-decl "finite_sets[Pair].finite_set" SPLTheory
     nil))
   shostak))
 (foldl_TCC1 0
  (foldl_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (pi_r_TCC1 0
  (pi_r_TCC1-1 nil 3768310294
   ("" (skolem 1 cm)
    (("" (typepred "ord(cm)")
      ((""
        (replace-extensionality
         "LAMBDA (x: nat, y: nat): ord(cm)(x, y)" "ord(cm)")
        nil nil))
      nil))
    nil)
   ((CompositionalModel type-eq-decl nil SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (pi_r_TCC2 0
  (pi_r_TCC2-1 nil 3768310294 ("" (termination-tcc) nil nil)
   ((member const-decl "bool" sets nil)) nil))
 (pi_r_TCC3 0
  (pi_r_TCC3-1 nil 3769508394
   ("" (skolem 1 (cm idt c pair) :skolem-typepreds? t)
    (("" (flatten)
      (("" (use memberDependents)
        (("" (skolem -1 (e num))
          (("" (flatten)
            (("" (assert)
              (("" (typepred "cm`ord")
                (("" (instantiate -2 (num idt)) (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (dependents const-decl "list[Pair]" SPLTheory nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (memberDependents formula-decl nil SPLTheory nil))
   nil))
 (pi_r_TCC4 0
  (pi_r_TCC4-1 nil 3785084184
   ("" (skeep 1 :preds? t)
    (("" (use memberDependents)
      (("" (skolem -1 (e num))
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((memberDependents formula-decl nil SPLTheory nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (dependents const-decl "list[Pair]" SPLTheory nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil))
   nil))
 (pi_r_TCC5 0
  (pi_r_TCC5-1 nil 3785084184
   ("" (skeep 1 :preds? t) (("" (use "every_member[Pair]") nil nil))
    nil)
   ((dependents const-decl "list[Pair]" SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (list type-decl nil list_adt nil)
    (every_member formula-decl nil list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil))
   nil))
 (finitePairsExp_TCC1 0
  (finitePairsExp_TCC1-1 nil 3785085739
   ("" (skeep 1 :preds? t)
    (("" (typepred "ce`ord")
      (("" (instantiate -2 (n id))
        (("" (expand member) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((CompositionalExpression type-eq-decl nil SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (finitePairsExp 0
  (finitePairsExp-1 nil 3785085739 ("" (judgement-tcc) nil nil) nil
   nil))
 (memberDependentsExp 0
  (memberDependentsExp-1 nil 3785086020
   ("" (skolem 1 (ce id pair) :skolem-typepreds? t)
    (("" (expand dependentsExp)
      (("" (expand dependentesExp)
        ((""
          (typepred " set2list({p: Pair |
                         EXISTS (pc: PresenceCondition, n: nat):
                           ce`ord(n, id) AND
                            p`idt = n AND p`pc = getPCi(ce, n)})")
          (("1" (instantiate -2 pair) (("1" (assert) nil nil)) nil)
           ("2" (use finitePairsExp) nil nil)
           ("3" (skeep 1 :preds? t)
            (("3" (expand member (-4 1))
              (("3" (typepred "ce`ord")
                (("3" (instantiate -2 (n id)) (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dependentsExp const-decl "list[Pair]" SPLTheory nil)
    (member const-decl "bool" sets nil)
    (CompositionalExpression type-eq-decl nil SPLTheory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (set2list def-decl "{l: list[Pair] |
         length(l) = card(s) AND (FORALL (x: Pair): s(x) IFF member(x, l))}"
     SPLTheory nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (length def-decl "nat" list_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finitePairsExp judgement-tcc nil SPLTheory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dependentesExp const-decl "finite_sets[Pair].finite_set" SPLTheory
     nil))
   shostak))
 (foldlExp_TCC1 0
  (foldlExp_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (sigma_r_TCC1 0
  (sigma_r_TCC1-1 nil 3769508394
   ("" (skolem 1 ce)
    (("" (typepred "ord(ce)")
      ((""
        (replace-extensionality
         "LAMBDA (x: nat, y: nat): ord(ce)(x, y)" "ord(ce)")
        nil nil))
      nil))
    nil)
   ((CompositionalExpression type-eq-decl nil SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sigma_r_TCC2 0
  (sigma_r_TCC2-1 nil 3769508394 ("" (termination-tcc) nil nil)
   ((member const-decl "bool" sets nil)) nil))
 (sigma_r_TCC3 0
  (sigma_r_TCC3-1 nil 3769508394
   ("" (skolem 1 (ce idt c pair) :skolem-typepreds? t)
    (("" (use memberDependentsExp)
      (("" (skolem -1 (e num))
        (("" (flatten)
          (("" (typepred "ce`ord")
            (("" (instantiate -2 (num idt)) (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((memberDependentsExp formula-decl nil SPLTheory nil)
    (CompositionalExpression type-eq-decl nil SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (dependentsExp const-decl "list[Pair]" SPLTheory nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (sigma_r_TCC4 0
  (sigma_r_TCC4-1 nil 3785085308
   ("" (skolem 1 (ce idt c pair) :skolem-typepreds? t)
    (("" (flatten)
      (("" (use memberDependentsExp)
        (("" (skolem -1 (e num))
          (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (dependentsExp const-decl "list[Pair]" SPLTheory nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CompositionalExpression type-eq-decl nil SPLTheory nil)
    (memberDependentsExp formula-decl nil SPLTheory nil))
   nil))
 (sigma_r_TCC5 0
  (sigma_r_TCC5-1 nil 3785085308
   ("" (skolem 1 (ce idt)) (("" (use "every_member[Pair]") nil nil))
    nil)
   ((dependentsExp const-decl "list[Pair]" SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (CompositionalExpression type-eq-decl nil SPLTheory nil)
    (list type-decl nil list_adt nil)
    (every_member formula-decl nil list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil))
   nil))
 (getPCequal 0
  (getPCequal-1 nil 3776680652
   ("" (skolem 1 (cm n))
    (("" (expand getPC)
      (("" (lift-if)
        (("" (bddsimp)
          (("1" (assert)
            (("1" (expand hatAlpha) (("1" (propax) nil nil)) nil)) nil)
           ("2" (expand hatAlpha) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((hatAlpha def-decl "AnnotativeExpression" SPLTheory nil)) shostak))
 (topEqual 0
  (topEqual-1 nil 3776690283
   ("" (skolem 1 cm) (("" (expand fmap) (("" (propax) nil nil)) nil))
    nil)
   ((fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil))
   shostak))
 (dependentesEqual_TCC1 0
  (dependentesEqual_TCC1-1 nil 3776764537 ("" (subtype-tcc) nil nil)
   ((AnnotativeExpression type-decl nil SPLTheory nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil))
   nil))
 (dependentesEqual 0
  (dependentesEqual-1 nil 3776764544
   ("" (skeep 1 :preds? t)
    (("" (expand dependentes)
      (("" (expand dependentesExp)
        (("" (decompose-equality 1)
          (("1" (expand getPCi)
            (("1" (expand fmap)
              (("1" (expand member)
                (("1" (typepred "cm`ord")
                  (("1" (label "ordType" -2)
                    (("1" (bddsimp)
                      (("1" (skolem -3 (e num))
                        (("1" (flatten)
                          (("1" (instantiate 1 (e num))
                            (("1" (assert)
                              (("1"
                                (use getPCequal)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem -3 (e num))
                        (("2" (instantiate 1 (e num))
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (use getPCequal)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand member)
            (("2" (skeep 1 :preds? t)
              (("2" (expand fmap)
                (("2" (assert)
                  (("2" (typepred "ord(cm)")
                    (("2" (instantiate -2 (n_1 n))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep 1 :preds? t)
            (("3" (expand member)
              (("3" (typepred "ord(cm)")
                (("3" (instantiate -2 (n_1 n)) (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dependentes const-decl "finite_sets[Pair].finite_set" SPLTheory
     nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (hatAlpha def-decl "AnnotativeExpression" SPLTheory nil)
    (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil)
    (CompositionalThing type-eq-decl nil CompositionalThings nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (CompositionalExpression type-eq-decl nil SPLTheory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (getPCequal formula-decl nil SPLTheory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dependentesExp const-decl "finite_sets[Pair].finite_set" SPLTheory
     nil))
   shostak))
 (dependentsEqual 0
  (dependentsEqual-1 nil 3776680361
   ("" (skeep 1 :preds? t)
    (("" (expand (dependents dependentsExp))
      (("" (rewrite "dependentesEqual") nil nil)) nil))
    nil)
   ((dependentsExp const-decl "list[Pair]" SPLTheory nil)
    (dependents const-decl "list[Pair]" SPLTheory nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dependentesEqual formula-decl nil SPLTheory nil))
   shostak))
 (generalizar_TCC1 0
  (generalizar_TCC1-1 nil 3785090672 ("" (subtype-tcc) nil nil)
   ((AnnotativeExpression type-decl nil SPLTheory nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil))
   nil))
 (generalizar_TCC2 0
  (generalizar_TCC2-1 nil 3785090672 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil)
    (member const-decl "bool" sets nil))
   nil))
 (generalizar_TCC3 0
  (generalizar_TCC3-1 nil 3785090672
   ("" (skosimp) (("" (use "every_member[Pair]") nil nil)) nil)
   ((list type-decl nil list_adt nil)
    (every_member formula-decl nil list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil))
   nil))
 (generalizar_TCC4 0
  (generalizar_TCC4-1 nil 3785090672 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil)
    (member const-decl "bool" sets nil))
   nil))
 (generalizar 0
  (generalizar-1 nil 3785091191
   ("" (skolem 1 (cm x c "_") :skolem-typepreds? t)
    (("" (induct ls)
      (("1" (expand map) (("1" (propax) nil nil)) nil)
       ("2" (skolem 1 (head tail))
        (("2" (flatten)
          (("2" (expand map 1)
            (("2" (decompose-equality 1)
              (("1" (expand hatAlpha 1 2)
                (("1" (expand hatAlpha 1 2)
                  (("1" (instantiate -3 head)
                    (("1" (expand member -3)
                      (("1" (flatten)
                        (("1" (instantiate -2 "head`idt")
                          (("1" (assert)
                            (("1" (lift-if) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split -1)
                (("1" (postpone) nil nil) ("2" (propax) nil nil)
                 ("3" (skolem 1 pair)
                  (("3" (flatten)
                    (("3" (instantiate -3 pair)
                      (("3" (assert)
                        (("3" (expand member -3 1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep 1 :preds? t)
                (("3" (instantiate -5 p!1)
                  (("3" (assert)
                    (("3" (expand member -5) (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (instantiate -4 head)
                  (("4" (expand member) (("4" (flatten) nil nil)) nil))
                  nil))
                nil)
               ("5" (skeep 1 :preds? t)
                (("5" (expand fmap 1)
                  (("5" (instantiate -5 p!1)
                    (("5" (assert)
                      (("5" (expand member -5) (("5" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (flatten)
                (("6" (expand fmap 1)
                  (("6" (instantiate -4 "head")
                    (("6" (assert)
                      (("6" (expand member -4) (("6" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skolem 1 ls)
        (("3" (flatten)
          (("3" (skeep 1 :preds? t)
            (("3" (instantiate -3 p1)
              (("3" (assert)
                (("3" (expand member -3) (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ls)
        (("4" (flatten) (("4" (use "every_member[Pair]") nil nil))
          nil))
        nil)
       ("5" (skeep 1 :preds? t)
        (("5" (skeep 1 :preds? t)
          (("5" (expand fmap 1)
            (("5" (instantiate -3 p1)
              (("5" (assert)
                (("5" (expand member -3) (("5" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep 1 :preds? t)
        (("6" (expand fmap 1) (("6" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (commutative_feature_product_product 0
  (commutative_feature_product_product-15 "" 3785089107
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("1" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("1"
                                (replace -1 1 RL)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "isomorphismModelExpList")
                                    (("1"
                                      (expand fmap 1 1)
                                      (("1"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("1"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(fmap(hatAlpha, cm), x))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("5"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("6"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("7"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("8"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("6"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("7"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("8"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("9"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("10"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("6"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("7"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("8"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("9"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("10"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("11"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("12"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil)
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (commutative_feature_product_product-14 "" 3785088899
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(fmap(hatAlpha, cm), x))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-13 "" 3785088702
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(fmap(hatAlpha, cm), x))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{ls:list[Pair] | FORALL(p:Pair):member(p,ls) IMPLIES member(p, dependents(cm,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-12 "" 3785088556
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(fmap(hatAlpha, cm), x))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "list[Pair]")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-11 "" 3785088198
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(fmap(hatAlpha, cm), x))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-10 "" 3785088094
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, idt))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(fmap(hatAlpha, cm), x))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-9 "" 3785087467
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, idt))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, idt))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(fmap(hatAlpha, cm), x))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, x))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-8 "" 3785087323
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p:{par:Pair|member(par,dependents(cm, idt))}):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p:{par:Pair|member(par,dependents(cm, idt))}):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p:{par:Pair|member(par,dependentsExp(ce, idt))}):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p:{par:Pair|member(par,dependents(cm, idt))}):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-7 "" 3785086829
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[(cm`idt), cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:(cm`idt)): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                                  map(LAMBDA (p: Pair):
                                        IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p: Pair):
                                              IF (c(p`pc))
                                                THEN ModelBase(pi_r(cm, p`idt, c))
                                              ELSE ModelBase(emptyproduct)
                                              ENDIF,
                                            dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p: Pair):
                                       IF (c(p`pc))
                                         THEN BaseExpression(sigma_r
                                                             (fmap(hatAlpha, cm),
                                                              p`idt,
                                                              c))
                                       ELSE BaseExpression(emptyproperty)
                                       ENDIF,
                                     dependents(cm, x))=map(hatAlpha,
                                      map(LAMBDA (p: Pair):
                                            IF (c(p`pc))
                                              THEN ModelBase(pi_r(cm, p`idt, c))
                                            ELSE ModelBase(emptyproduct)
                                            ENDIF,
                                          dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                               EXISTS (pc: PresenceCondition, n: nat):
                                 cm`ord(n, x) AND
                                  p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                                EXISTS (pc: PresenceCondition, n: nat):
                                  cm`ord(n, x) AND
                                   p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil)))
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (commutative_feature_product_product-6 "" 3784999460
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[nat, cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:nat): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                             map(LAMBDA (p: Pair):
                                   IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                   ELSE ModelBase(emptyproduct)
                                   ENDIF,
                                 dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p: Pair):
                                        IF (c(p`pc))
                                          THEN ModelBase(pi_r(cm, p`idt, c))
                                        ELSE ModelBase(emptyproduct)
                                        ENDIF,
                                      dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p: Pair):
                                 IF (c(p`pc))
                                   THEN BaseExpression(sigma_r
                                                       (fmap(hatAlpha, cm),
                                                        p`idt,
                                                        c))
                                 ELSE BaseExpression(emptyproperty)
                                 ENDIF,
                               dependents(cm, x))=map(hatAlpha,
                                map(LAMBDA (p: Pair):
                                      IF (c(p`pc))
                                        THEN ModelBase(pi_r(cm, p`idt, c))
                                      ELSE ModelBase(emptyproduct)
                                      ENDIF,
                                    dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(p`idt,x))}")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           pair)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   dependents)
                                                                  (("1"
                                                                    (expand
                                                                     dependentes)
                                                                    (("1"
                                                                      (typepred
                                                                       "set2list({p: Pair |
                       EXISTS (pc: PresenceCondition, n: nat):
                         cm`ord(n, x) AND
                          p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         pair)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -2
                                                                             (e
                                                                              num))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 member)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("1"
                                                                                      (instantiate
                                                                                       -2
                                                                                       (num
                                                                                        x))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "cm`idt")
                                                                        (("2"
                                                                          (typepred
                                                                           "cm`ord")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               is_finite)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1
                                                                                 :preds?
                                                                                 t)
                                                                                (("2"
                                                                                  (instantiate
                                                                                   1
                                                                                   (N
                                                                                    "LAMBDA(pair:{p: Pair |
                     EXISTS (pc: PresenceCondition, n: nat):
                       cm`ord(n, x) AND
                        p`idt = n AND p`pc = getPCi(cm, n)}):f(pair`idt)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     injective?)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("1"
                                                                                        (instantiate
                                                                                         -4
                                                                                         ("x1`idt"
                                                                                          "x2`idt"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -1
                                                                                               (pc1
                                                                                                n1))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   (pc2
                                                                                                    n2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep
                                                                                     1
                                                                                     :preds?
                                                                                     t)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cm`ord")
                                                                                        (("2"
                                                                                          (instantiate
                                                                                           -2
                                                                                           (n
                                                                                            x))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "cm`ord")
                                                                                    (("3"
                                                                                      (skeep
                                                                                       1
                                                                                       :preds?
                                                                                       t)
                                                                                      (("3"
                                                                                        (instantiate
                                                                                         -3
                                                                                         (n
                                                                                          x))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             member)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         member
                                                                         1)
                                                                        (("3"
                                                                          (skolem
                                                                           1
                                                                           (par
                                                                            n))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (typepred
                                                                               "cm`ord")
                                                                              (("3"
                                                                                (instantiate
                                                                                 -2
                                                                                 (n
                                                                                  x))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (instantiate
                                                                               -4
                                                                               "head`idt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skolem
                                                                       1
                                                                       pair)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (instantiate
                                                                           -2
                                                                           pair)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite dependentsEqual)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_ const-decl "Property" SPLTheory nil)
    (dependentsExp const-decl "list[Pair]" SPLTheory nil)
    (list_induction formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set2list def-decl "{l: list[Pair] |
         length(l) = card(s) AND (FORALL (x: Pair): s(x) IFF member(x, l))}"
     SPLTheory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (dependentes const-decl "finite_sets[Pair].finite_set" SPLTheory
     nil)
    (member def-decl "bool" list_props nil)
    (BaseExpression? adt-recognizer-decl
     "[AnnotativeExpression -> boolean]" SPLTheory nil)
    (BaseExpression adt-constructor-decl
     "[Property -> (BaseExpression?)]" SPLTheory nil)
    (dependentsEqual formula-decl nil SPLTheory nil)
    (isomorphismModelExpList formula-decl nil SPLTheory nil)
    (dependents const-decl "list[Pair]" SPLTheory nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (ModelBase adt-constructor-decl "[Product -> (ModelBase?)]"
     SPLTheory nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ModelBase? adt-recognizer-decl "[AnnotativeModel -> boolean]"
     SPLTheory nil)
    (Pair type-eq-decl nil SPLTheory nil)
    (partialModelComposition const-decl
     "[AnnotativeModel, AnnotativeModel -> AnnotativeModel]" SPLTheory
     nil)
    (foldl def-decl "AnnotativeModel" SPLTheory nil)
    (list type-decl nil list_adt nil)
    (commutative_product_family_product formula-decl nil SPLTheory nil)
    (Property nonempty-type-decl nil SPLTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (CompositionalExpression type-eq-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (Conf type-eq-decl nil SPLTheory nil)
    (sigma_r def-decl "Property" SPLTheory nil)
    (CompositionalThing type-eq-decl nil CompositionalThings nil)
    (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil)
    (hatAlpha def-decl "AnnotativeExpression" SPLTheory nil)
    (Product nonempty-type-decl nil SPLTheory nil)
    (emptyproduct const-decl "Product" SPLTheory nil)
    (emptyproperty const-decl "Property" SPLTheory nil)
    (alpha const-decl
     "{f: [Product -> Property] | f(emptyproduct) = emptyproperty}"
     SPLTheory nil)
    (pi_r def-decl "Product" SPLTheory nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AnnotativeModel type-decl nil SPLTheory nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CompositionalModel type-eq-decl nil SPLTheory nil)
    (pi_ const-decl "Product" SPLTheory nil)
    (analyzeCM const-decl "CompositionalExpression" SPLTheory nil))
   nil)
  (commutative_feature_product_product-5 "" 3776785224
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[nat, cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:nat): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                        map(LAMBDA (p: Pair):
                              IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                              ELSE ModelBase(emptyproduct)
                              ENDIF,
                            dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "isomorphismModelExpList")
                                    (("2"
                                      (expand fmap 1 1)
                                      (("2"
                                        (instantiate -1 ("cm`E(x)" _))
                                        (("2"
                                          (case-replace
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (instantiate
                                             -2
                                             "map(LAMBDA (p: Pair):
                                  IF (c(p`pc))
                                    THEN ModelBase(pi_r(cm, p`idt, c))
                                  ELSE ModelBase(emptyproduct)
                                  ENDIF,
                                dependents(cm, x))")
                                            (("1"
                                              (replace -2 1 RL)
                                              (("1"
                                                (case-replace
                                                 "map(LAMBDA (p: Pair):
                           IF (c(p`pc))
                             THEN BaseExpression(sigma_r
                                                 (fmap(hatAlpha, cm),
                                                  p`idt,
                                                  c))
                           ELSE BaseExpression(emptyproperty)
                           ENDIF,
                         dependents(cm, x))=map(hatAlpha,
                          map(LAMBDA (p: Pair):
                                IF (c(p`pc))
                                  THEN ModelBase(pi_r(cm, p`idt, c))
                                ELSE ModelBase(emptyproduct)
                                ENDIF,
                              dependents(cm, x)))")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (generalize
                                                         "dependents(cm, x)"
                                                         l
                                                         "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES (member(p`idt,cm`idt) AND cm`ord(x,p`idt))}")
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (induct l)
                                                          (("1"
                                                            (typepred
                                                             l!1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 map)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skolem
                                                             1
                                                             (head
                                                              tail))
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 map
                                                                 1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     hatAlpha
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       hatAlpha
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (instantiate
                                                                         -2
                                                                         head)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (commutative_feature_product_product-4 "" 3774361999
   ("" (expand analyzeCM)
    (("" (expand sigma_)
      (("" (expand pi_)
        (("" (skolem 1 (cm c))
          (("" (lemma "wf_induction[nat, cm`ord].wf_induction")
            ((""
              (instantiate -1
               "LAMBDA(i:nat): sigma_r(fmap(hatAlpha, cm), i, c) = alpha(pi_r(cm, i, c))")
              (("" (split -1)
                (("1" (instantiate -1 "cm`top")
                  (("1" (expand fmap 1 2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skolem 1 x)
                    (("2" (flatten)
                      (("2" (expand pi_r +)
                        (("2" (expand sigma_r +)
                          (("2"
                            (lemma
                             "commutative_product_family_product")
                            (("2"
                              (instantiate -1
                               (c
                                "foldl(partialModelComposition, cm`E(x),
                        map(LAMBDA (p: Pair):
                              IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                              ELSE ModelBase(emptyproduct)
                              ENDIF,
                            dependents(cm, x)))"))
                              (("2"
                                (replace -1 1 RL)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (case-replace
                                     "foldlExp(partialExpComposition,
                       fmap(hatAlpha, cm)`E(x),
                       map(LAMBDA (p: Pair):
                             IF (c(p`pc))
                               THEN BaseExpression(sigma_r
                                                   (fmap(hatAlpha, cm), p`idt, c))
                             ELSE BaseExpression(emptyproperty)
                             ENDIF,
                           dependentsExp(fmap(hatAlpha, cm), x)))=hatAlpha(foldl(partialModelComposition, cm`E(x),
                              map(LAMBDA (p: Pair):
                                    IF (c(p`pc))
                                      THEN ModelBase(pi_r(cm, p`idt, c))
                                    ELSE ModelBase(emptyproduct)
                                    ENDIF,
                                  dependents(cm, x))))")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (expand fmap 1 1)
                                        (("2"
                                          (case
                                           "dependentsExp(fmap(hatAlpha, cm), x)=dependents(cm, x)")
                                          (("1"
                                            (replace -1 1 RL)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (lemma
                                                 isomorphismModelExpList)
                                                (("1"
                                                  (instantiate
                                                   -1
                                                   ("cm`E(x)"
                                                    "map(LAMBDA (p: Pair):
                               IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                               ELSE ModelBase(emptyproduct)
                               ENDIF,
                             dependents(cm, x))"))
                                                  (("1"
                                                    (replace -1 1 RL)
                                                    (("1"
                                                      (case-replace
                                                       "map(LAMBDA (p: Pair):
                       IF (c(p`pc))
                         THEN BaseExpression(sigma_r
                                             (fmap(hatAlpha, cm), p`idt, c))
                       ELSE BaseExpression(emptyproperty)
                       ENDIF,
                     dependents(cm, x))=map(hatAlpha,
                      map(LAMBDA (p: Pair):
                            IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                            ELSE ModelBase(emptyproduct)
                            ENDIF,
                          dependents(cm, x)))")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (generalize
                                                               "dependents(cm, x)"
                                                               l
                                                               "{l:list[Pair] | FORALL (p:Pair) : member(p,l) IMPLIES cm`ord(x,p`idt)}")
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (skolem
                                                                   1
                                                                   par)
                                                                  (("1"
                                                                    (expand
                                                                     member)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (bddsimp)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             dependents)
                                                                            (("1"
                                                                              (expand
                                                                               dependentes)
                                                                              (("1"
                                                                                (expand
                                                                                 set2list
                                                                                 2)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (bddsimp)
                                                                                    (("1"
                                                                                      (expand
                                                                                       set2list
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "choose({p: Pair |
                     EXISTS (pc: PresenceCondition, n: nat):
                       cm`ord(x, n) AND
                        p`idt = n AND p`pc = getPCi(cm, n)})")
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         (exp
                                                                                          n))
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             3)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         nonempty?)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         member
                                                                                         1)
                                                                                        (("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (commutative_feature_product_product-3 "" 3773155207
   ("" (skolem 1 (cm conf))
    (("" (lemma "wf_induction[nat, cm`ord].wf_induction")
      (("" (expand pi_)
        (("" (expand pi_r)
          (("" (expand foldl)
            (("" (expand sigma_)
              (("" (expand sigma_r)
                (("" (expand foldlExp) (("" (postpone) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (commutative_feature_product_product-2 "measure_induction" 3763472700
   ("" (skolem 1 (cm conf))
    (("" (lemma "wf_induction[nat, cm`ord].wf_induction")
      (("" (expand sigma_)
        (("" (expand pi_)
          ((""
            (instantiate -1
             "LAMBDA(i:nat):cm`idt(i) IMPLIES sigma_r(analyzeCM(cm), i, conf) = alpha(pi_r(cm, i, conf))")
            (("" (split)
              (("1" (expand analyzeCM 1 2)
                (("1" (expand fmap 1)
                  (("1" (instantiate -1 "top(cm)")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skolem 1 x)
                  (("2" (flatten)
                    (("2"
                      (case "EXISTS(y:nat): cm`ord(y,x) AND cm`idt(y)")
                      (("1" (skolem -1 y)
                        (("1" (flatten)
                          (("1" (instantiate -3 y)
                            (("1" (assert)
                              (("1"
                                (expand sigma_r 1)
                                (("1"
                                  (expand pi_r 1)
                                  (("1"
                                    (expand dependents)
                                    (("1"
                                      (expand set2list)
                                      (("1"
                                        (case
                                         "empty?(dependentes(cm, x))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand analyzeCM 1 4)
                                            (("1"
                                              (expand fmap 1)
                                              (("1"
                                                (expand dependentsExp)
                                                (("1"
                                                  (expand set2list)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "empty?(dependentesExp((# idt := idt(cm),
                                                     E
                                                     := LAMBDA
                                                        (x: nat):
                                                        hatAlpha(E(cm)(x)),
                                                     ord := ord(cm),
                                                     top := top(cm) #),
                                                  x))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand map)
                                                          (("1"
                                                            (expand
                                                             foldl)
                                                            (("1"
                                                              (expand
                                                               foldlExp)
                                                              (("1"
                                                                (expand
                                                                 analyzeCM
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   fmap
                                                                   1)
                                                                  (("1"
                                                                    (use
                                                                     "commutative_product_family_product")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (commutative_feature_product_product-1 nil 3762875081
   ("" (skolem 1 (cm c))
    (("" (expand pi_)
      (("" (expand foldl)
        ((""
          (case "map(LAMBDA (p: Pair):
                            IF (c(pc(p))) THEN ModelBase(pi_(cm(p), c))
                            ELSE ModelBase(emptyproduct)
                            ENDIF,
                          dependents(cm, top(cm)))=null")
          (("1" (assert) (("1" (postpone) nil nil)) nil)
           ("2" (lift-if)
            (("2" (bddsimp)
              (("2" (expand pi)
                (("2" (lift-if)
                  (("2" (bddsimp)
                    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
                     ("3" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (lift_TCC1 0
  (lift_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (lift_TCC2 0
  (lift_TCC2-1 nil 3762261712 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (sigmaLift_TCC1 0
  (sigmaLift_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl
     "(strict_well_founded?[LiftedAnnotativeExpression])" SPLTheory
     nil))
   nil))
 (sigmaLift_TCC2 0
  (sigmaLift_TCC2-1 nil 3762261712 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl
     "(strict_well_founded?[LiftedAnnotativeExpression])" SPLTheory
     nil))
   nil)))

