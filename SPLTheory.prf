(SPLTheory
 (pi_TCC1 0
  (pi_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (pi_TCC2 0
  (pi_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])"
     SPLTheory nil))
   nil))
 (hatAlpha_TCC1 0
  (hatAlpha_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (hatAlpha_TCC2 0
  (hatAlpha_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLTheory nil))
   nil))
 (commutative_product_family_product 0
  (commutative_product_family_product-1 nil 3734364247
   ("" (skolem 1 (conf _))
    (("" (induct vModel)
      (("1" (skolem 1 mbase)
        (("1" (expand hatAlpha)
          (("1" (expand sigma)
            (("1" (expand pi) (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 (pcon am1 am2))
        (("2" (flatten)
          (("2" (expand hatAlpha 1)
            (("2" (expand sigma 1)
              (("2" (expand pi 1)
                (("2" (lift-if) (("2" (bddsimp) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AnnotativeModel type-decl nil SPLTheory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Property nonempty-type-decl nil SPLTheory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AnnotativeExpression type-decl nil SPLTheory nil)
    (PresenceCondition nonempty-type-decl nil SPLTheory nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Conf type-eq-decl nil SPLTheory nil)
    (sigma def-decl "Property" SPLTheory nil)
    (hatAlpha def-decl "AnnotativeExpression" SPLTheory nil)
    (Product nonempty-type-decl nil SPLTheory nil)
    (alpha const-decl "[Product -> Property]" SPLTheory nil)
    (pi def-decl "Product" SPLTheory nil)
    (AnnotativeModel_induction formula-decl nil SPLTheory nil))
   shostak)))

