(SPLTheory
 (analyzeModel_TCC1 0
  (analyzeModel_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (analyzeModel_TCC2 0
  (analyzeModel_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectModel_TCC1 0
  (projectModel_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectModel_TCC2 0
  (projectModel_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectModel_TCC3 0
  (projectModel_TCC3-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectModel_TCC4 0
  (projectModel_TCC4-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectProperty_TCC1 0
  (projectProperty_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectProperty_TCC2 0
  (projectProperty_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectProperty_TCC3 0
  (projectProperty_TCC3-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (projectProperty_TCC4 0
  (projectProperty_TCC4-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (varAnalyzeModel_TCC1 0
  (varAnalyzeModel_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (varAnalyzeModel_TCC2 0
  (varAnalyzeModel_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil)
   nil nil))
 (commutative_product_family_product 0
  (commutative_product_family_product-1 nil 3734364247
   ("" (induct vModel)
    (("1" (skolem 1 vmbase)
      (("1" (skolem 1 conf)
        (("1" (expand projectModel)
          (("1" (expand varAnalyzeModel)
            (("1" (expand projectProperty) (("1" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 (option vmodel1 vmodel2))
      (("2" (flatten)
        (("2" (skolem 1 conf)
          (("2" (expand projectModel 1)
            (("2" (expand varAnalyzeModel 1)
              (("2" (expand varJoinProperty 1)
                (("2" (expand projectProperty 1)
                  (("2" (lift-if)
                    (("2" (instantiate -1 conf)
                      (("2" (instantiate -2 conf)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skolem 1 (vmcomp1 vmcomp2))
      (("3" (flatten)
        (("3" (skolem 1 conf)
          (("3" (expand varAnalyzeModel 1)
            (("3" (expand varCompositeProperty 1)
              (("3" (expand projectProperty 1)
                (("3" (expand projectModel 1)
                  (("3" (expand analyzeModel 1)
                    (("3" (instantiate -1 conf)
                      (("3" (instantiate -2 conf)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VarModel type-decl nil SPLTheory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Option nonempty-type-decl nil SPLTheory nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Conf type-eq-decl nil SPLTheory nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VarProperty type-decl nil SPLTheory nil)
    (Property_pred const-decl "[[boolean + real] -> boolean]" SPLTheory
     nil)
    (Property nonempty-type-from-decl nil SPLTheory nil)
    (projectProperty def-decl "Property" SPLTheory nil)
    (varAnalyzeModel def-decl "VarProperty" SPLTheory nil)
    (Model type-decl nil SPLTheory nil)
    (analyzeModel def-decl "Property" SPLTheory nil)
    (projectModel def-decl "Model" SPLTheory nil)
    (VarModel_induction formula-decl nil SPLTheory nil)
    (varJoinProperty const-decl "VarProperty" SPLTheory nil)
    (varCompositeProperty const-decl "VarProperty" SPLTheory nil))
   shostak)))

