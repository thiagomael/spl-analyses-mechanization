(SPLAnalysis
 (pi_TCC1 0
  (pi_TCC1-1 nil 3729005690 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLAnalysis nil))
   nil))
 (pi_TCC2 0
  (pi_TCC2-1 nil 3729005690 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLAnalysis nil))
   nil))
 (pi_TCC3 0
  (pi_TCC3-1 nil 3729005690
   ("" (induct va)
    (("1" (skeep :preds? t)
      (("1" (skeep :preds? t)
        (("1" (rewrite -2) (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (skeep :preds? t)
      (("2" (skeep :preds? t)
        (("2" (skeep :preds? t)
          (("2" (expand member)
            (("2" (split -)
              (("1" (rewrite -) (("1" (grind) nil nil)) nil)
               ("2" (inst -2 "apl WITH [am:=variableAsset(cons2_var)]")
                (("2" (assert)
                  (("2" (inst -2 apl2)
                    (("2" (rewrite -3)
                      (("2" (expand <<)
                        (("2" (rewrite "some_exists")
                          (("2" (rewrite "some_exists")
                            (("2" (skeep :preds? t)
                              (("2"
                                (inst + "n+1")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FeatureModel nonempty-type-decl nil SPLAnalysis nil)
    (PresenceFunction type-eq-decl nil SPLAnalysis nil)
    (AnnotativeProductLine type-eq-decl nil SPLAnalysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (variableAsset? adt-recognizer-decl "[AnnotativeModel -> boolean]"
     SPLAnalysis nil)
    (variableAsset adt-constructor-decl
     "[list[AnnotativeModel] -> (variableAsset?)]" SPLAnalysis nil)
    (member def-decl "bool" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[AnnotativeModel])"
     SPLAnalysis nil)
    (AnnotativeModel type-decl nil SPLAnalysis nil)
    (list_induction formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons1_var skolem-const-decl "AnnotativeModel" SPLAnalysis nil)
    (n skolem-const-decl "below(length(cons2_var))" SPLAnalysis nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons2_var skolem-const-decl "list[AnnotativeModel]" SPLAnalysis
     nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (some_exists formula-decl nil more_list_props "structures/")
    (some adt-def-decl "boolean" list_adt nil))
   nil))
 (pi_TCC4 0
  (pi_TCC4-1 nil 3729005690 ("" (subtype-tcc) nil nil) nil nil))
 (pi_TCC5 0
  (pi_TCC5-1 nil 3729005690 ("" (subtype-tcc) nil nil) nil nil))
 (alpha_TCC1 0
  (alpha_TCC1-1 nil 3729005690 ("" (existence-tcc) nil nil) nil nil))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3729005690 ("" (existence-tcc) nil nil) nil nil)))

